# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-08-30 09:24
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import macaddress.fields
import pythonix_admin.bl


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP адрес клиена')),
                ('ipv6_address', models.GenericIPAddressField(default='2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d', verbose_name='IPv6 адрес клиена')),
                ('send_sms', models.BooleanField(default=False, verbose_name='Желание получать смс')),
                ('create_date', models.DateField(auto_now_add=True, verbose_name='Дата подключения')),
                ('end_used_date', models.DateField(default=datetime.datetime(2017, 9, 2, 9, 24, 41, 694942), verbose_name='Дата окончяния услуги')),
                ('mobile_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Мобильный телефон')),
                ('home_address', models.CharField(blank=True, max_length=50, null=True, verbose_name='Домашний адрес')),
                ('network_traffic_per_day', models.IntegerField(default=0, null=True, verbose_name='Сетевой трафик за день')),
                ('network_traffic_for_the_month', models.IntegerField(default=0, null=True, verbose_name='Сетевой трафик за месяц')),
                ('balance', models.IntegerField(default=0, verbose_name='Баланс')),
                ('internet_status', models.BooleanField(default=True, verbose_name='Статус клиента, доступ разрешен/запрещен')),
                ('error_card', models.IntegerField(default=0, null=True, verbose_name='Ошибки пополнения карточкой')),
                ('deleted_user', models.BooleanField(default=False, verbose_name='Статус удаления пользователя')),
                ('key', models.CharField(max_length=50)),
                ('login', models.CharField(default='', max_length=50, verbose_name='Логин')),
                ('exemption', models.BooleanField(default=False)),
                ('fix_work_period', models.BooleanField(default=True, verbose_name='Работает с первого по первое')),
                ('vk', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Профиль Вконтакте')),
                ('facebook', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Профиль в facebook')),
                ('mac_address', macaddress.fields.MACAddressField(blank=True, integer=False, max_length=17, null=True)),
            ],
            options={
                'db_table': 'clients',
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='ClientsGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Название группы')),
            ],
            options={
                'db_table': 'clients_groups',
                'verbose_name': 'Группа клиентов',
                'verbose_name_plural': 'Группы клиентов',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permissions_role', models.CharField(choices=[('ROLE_SUPER_ADMIN', 'ROLE_SUPER_ADMIN'), ('ROLE_ADMIN', 'ROLE_ADMIN'), ('OPERATOR_PAYER', 'OPERATOR_PAYER'), ('ROLE_OPERATOR', 'ROLE_OPERATOR'), ('ROLE_INSTALLER', 'ROLE_INSTALLER')], default='ROLE_OPERATOR', max_length=255, verbose_name='Выбор привелегий доступа')),
                ('mobile_phone', models.CharField(max_length=13, validators=[pythonix_admin.bl.validate_phone], verbose_name='Номер телефона')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_employee', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
        ),
        migrations.CreateModel(
            name='IPV4Networks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipv4networks', models.GenericIPAddressField(verbose_name='IP Подсети')),
                ('CIDR', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16'), (17, '17'), (18, '18'), (19, '19'), (20, '20'), (21, '21'), (22, '22'), (23, '23'), (24, '24'), (25, '25'), (26, '26'), (27, '27'), (28, '28'), (29, '29'), (30, '30'), (31, '31'), (32, '32')], default=24)),
                ('ppp_auth', models.BooleanField(default=True, verbose_name='Использует PPP авторизацию')),
            ],
            options={
                'db_table': 'ip_v4_networks',
                'verbose_name': 'Подсеть IPv4',
                'verbose_name_plural': 'Список подсетей IPv4',
            },
        ),
        migrations.CreateModel(
            name='LogPay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sum', models.IntegerField(verbose_name='Сумма пополнения')),
                ('date_of_refill', models.DateField(auto_now_add=True, verbose_name='Дата пополнения')),
                ('before_balance', models.CharField(max_length=255, verbose_name='Баланс до')),
                ('before_date_off', models.CharField(max_length=255, verbose_name='Дата отключения до пополнения')),
                ('id_admin_select', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Employee', verbose_name='Выбор Администратора')),
                ('id_client_select', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Clients', verbose_name='Выбор Клиента')),
            ],
            options={
                'verbose_name': 'Лог пополнения',
                'verbose_name_plural': 'Логи пополнений',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_order', models.CharField(choices=[('REPAIRS', 'Ремонт'), ('CONNECTION', 'Подключение')], default='CONNECTION', max_length=255, verbose_name='Тип заявки')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания заявки')),
                ('date_end', models.DateField(blank=True, default=None, null=True, verbose_name='Дата выполнения заявки')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес ордера')),
                ('description', models.TextField(default='', verbose_name='Описание')),
                ('note', models.TextField(default='', verbose_name='Примечания')),
                ('framed', models.BooleanField(default=False, verbose_name='Оформленный')),
                ('close', models.BooleanField(default=False, verbose_name='Закрыт')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders_client', to='pythonix_admin.Clients', verbose_name='Выбор клиента')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator_emploee', to='pythonix_admin.Employee', verbose_name='Оформитель ордера')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executor_emploee', to='pythonix_admin.Employee', verbose_name='Исполнитель ордера')),
            ],
            options={
                'verbose_name': 'Заявка',
                'verbose_name_plural': 'Заявки',
            },
        ),
        migrations.CreateModel(
            name='PaySystemAccessData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название платежной системы')),
                ('ip_access', models.GenericIPAddressField(verbose_name='Разрешенные IP')),
                ('token_access', models.CharField(max_length=255, verbose_name='Токен доступа')),
            ],
            options={
                'verbose_name': 'Платежная система',
                'verbose_name_plural': 'Платежные системы',
            },
        ),
        migrations.CreateModel(
            name='PhysicalNetwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Название физической сети')),
                ('abbreviation', models.CharField(max_length=150, verbose_name='Аббревиатура физической сети')),
                ('channel_width', models.IntegerField(blank=True, null=True, verbose_name='Ширина канала')),
                ('select_admin', models.ManyToManyField(related_name='admins', to='pythonix_admin.Employee', verbose_name='Выбор администратора')),
            ],
            options={
                'db_table': 'physical_network',
                'verbose_name': 'Физическая сеть',
                'verbose_name_plural': 'Физические сети',
            },
        ),
        migrations.CreateModel(
            name='PySystemTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_number', models.IntegerField()),
                ('transaction_date', models.DateField(auto_now_add=True)),
                ('transaction_time', models.DateTimeField(auto_now_add=True)),
                ('login', models.CharField(default='', max_length=255)),
                ('sum', models.CharField(default='', max_length=255)),
                ('select_pay_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pay_system_transactions', to='pythonix_admin.PaySystemAccessData')),
            ],
            options={
                'verbose_name': 'Транзакция платежной системы',
                'verbose_name_plural': 'Транзакции платежной системы',
            },
        ),
        migrations.CreateModel(
            name='ReportNewMonth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_refill', models.DateField(auto_now_add=True, verbose_name='Дата пополнения')),
                ('before_balance', models.CharField(max_length=255, verbose_name='Баланс до')),
                ('after_balance', models.CharField(max_length=255, verbose_name='Баланс после')),
                ('before_date_off', models.CharField(max_length=255, verbose_name='Дата отключения до пополнения')),
                ('client_select', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Clients', verbose_name='Выбор Клиента')),
            ],
            options={
                'db_table': 'report_new_month',
                'verbose_name': 'Переход на новый месяц',
                'verbose_name_plural': 'Переход на новый месяц',
            },
        ),
        migrations.CreateModel(
            name='ReportPayAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sum', models.IntegerField(verbose_name='Сумма пополнения')),
                ('date_of_refill', models.DateField(auto_now_add=True, verbose_name='Дата пополнения')),
                ('before_balance', models.CharField(default='', max_length=255, verbose_name='Баланс до')),
                ('after_balance', models.CharField(default='', max_length=255, verbose_name='Баланс после')),
                ('before_date_off', models.CharField(default='', max_length=255, verbose_name='Дата отключения до пополнения')),
                ('id_admin_select', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Employee', verbose_name='Выбор Администратора')),
                ('id_client_select', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Clients', verbose_name='Выбор Клиента')),
            ],
            options={
                'db_table': 'report_pay_admin',
                'verbose_name': 'Пополнение администратором',
                'verbose_name_plural': 'Пополнение администратором',
            },
        ),
        migrations.CreateModel(
            name='SendEmailAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(choices=[('new_month', 'new_month'), ('clients_off', 'clients_off'), ('celery_on', 'celery_on')], max_length=255)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sending_emails', to='pythonix_admin.Employee')),
            ],
        ),
        migrations.CreateModel(
            name='Servers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название Сервера')),
                ('device_type', models.CharField(choices=[('mikrotik', 'MikroTik RouterOS')], default=1, max_length=255, verbose_name='Выбор операционной системы')),
                ('network_address', models.GenericIPAddressField(verbose_name='Сетевой адрес устройства')),
                ('login', models.CharField(max_length=50, verbose_name='Логин для доступа к устройству')),
                ('password', models.CharField(max_length=50, verbose_name='Пароль для доступа к устройству')),
                ('api_port', models.IntegerField(default=8728, verbose_name='API порт')),
                ('status_on_off', models.BooleanField(default=True, verbose_name='Состояние работы сервера')),
                ('radius_used', models.BooleanField(default=False, verbose_name='Использование радиус сервера')),
                ('physical_network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.PhysicalNetwork', verbose_name='Выбор физической сети')),
            ],
            options={
                'db_table': 'device',
                'verbose_name': 'Сервер',
                'verbose_name_plural': 'Сервера',
            },
        ),
        migrations.CreateModel(
            name='Streets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название улицы')),
                ('select_physical_network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streets', to='pythonix_admin.PhysicalNetwork', verbose_name='Выбор физической сети')),
            ],
            options={
                'db_table': 'streets',
                'verbose_name': 'Улицу',
                'verbose_name_plural': 'Улицы',
            },
        ),
        migrations.CreateModel(
            name='SystemEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Tarifs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Название тарифа')),
                ('speed_up', models.IntegerField(verbose_name='Исходящая скорость, значение')),
                ('speed_down', models.IntegerField(verbose_name='Входящая скорость, значение')),
                ('speed_up_unit', models.CharField(choices=[('k', 'k'), ('M', 'M')], max_length=1, verbose_name='Исходящая скорость, единица измерения')),
                ('speed_down_unit', models.CharField(choices=[('k', 'k'), ('M', 'M')], max_length=1, verbose_name='Входящая скорость, единица измерения')),
                ('price', models.IntegerField(verbose_name='Абонплата')),
                ('speed_limit', models.BooleanField(default=False, verbose_name='Лимитирование скорости')),
                ('limit_rule', models.CharField(blank=True, max_length=200, null=True, verbose_name='Правило, лимита')),
                ('add_rule_in_device', models.BooleanField(default=True, verbose_name='Создавать ли правила в устройстве')),
                ('select_physicalnetwork', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.PhysicalNetwork', verbose_name='Выбор физической сети')),
            ],
            options={
                'db_table': 'tarifs',
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
            },
        ),
        migrations.CreateModel(
            name='TemporaryPay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('del_pay', models.DateField(default=datetime.datetime(2017, 9, 2, 9, 24, 41, 699822), verbose_name='Дата удаления временного платежа')),
                ('price', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Clients')),
            ],
        ),
        migrations.AddField(
            model_name='clientsgroups',
            name='ipv4networks_list',
            field=models.ManyToManyField(related_name='networks', to='pythonix_admin.IPV4Networks', verbose_name='Список подсетей IPv4'),
        ),
        migrations.AddField(
            model_name='clientsgroups',
            name='select_admin',
            field=models.ManyToManyField(related_name='admin_clients_groups', to='pythonix_admin.Employee', verbose_name='Выбор администратора'),
        ),
        migrations.AddField(
            model_name='clientsgroups',
            name='select_server',
            field=models.ManyToManyField(related_name='servers', to='pythonix_admin.Servers', verbose_name='Выбор сервера'),
        ),
        migrations.AddField(
            model_name='clients',
            name='select_clients_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.ClientsGroups', verbose_name='Выбор группы клиентов'),
        ),
        migrations.AddField(
            model_name='clients',
            name='select_street',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Streets', verbose_name='Выбор улицы'),
        ),
        migrations.AddField(
            model_name='clients',
            name='select_tarif',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pythonix_admin.Tarifs', verbose_name='Выбор тарифа'),
        ),
        migrations.AddField(
            model_name='clients',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL),
        ),
    ]
